#!/usr/bin/env node

/**
 * Files Core CLI - Point d'entr√©e principal
 * CLI TypeScript CRUD pour la gestion de documents avec stockage MEGA
 */

import { Command } from 'commander';
import { userCommands } from './commands/userCommands';
import { documentCommands } from './commands/documentCommands';
import { logCommands } from './commands/logCommands';

const program = new Command();

// Configuration g√©n√©rale du CLI
program
  .name('files-core')
  .description('CLI TypeScript CRUD pour la gestion de documents avec stockage MEGA et base de donn√©es PostgreSQL')
  .version('1.0.0');

// Commandes utilisateur
program
  .addCommand(userCommands);

// Commandes document
program
  .addCommand(documentCommands);

// Commandes logs
program
  .addCommand(logCommands);

// Commande d'aide √©tendue
program
  .command('help-extended')
  .description('‚ùì Aide d√©taill√©e avec tous les exemples')
  .action(() => {
    console.log(`
üéØ Files Core - CLI CRUD complet

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üë§ GESTION DES UTILISATEURS
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

Cr√©er un utilisateur:
  files-core user create --email="user@example.com" --name="John Doe" --password="secret123"

Lire un utilisateur:
  files-core user read --id="user123"

Lister les utilisateurs:
  files-core user list --skip=0 --take=10

Mettre √† jour un utilisateur:
  files-core user update --id="user123" --name="Jane Doe" --email="jane@example.com"

Supprimer un utilisateur:
  files-core user delete --id="user123" --force

V√©rifier un mot de passe:
  files-core user verify --email="user@example.com" --password="secret123"

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üìÑ GESTION DES DOCUMENTS
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

Cr√©er un document:
  files-core document create --name="Mon document" --type="pdf" --owner-email="user@example.com" --file-path="/path/to/file.pdf"

Lire un document:
  files-core document read --id="doc123"

Lister les documents:
  files-core document list --skip=0 --take=10 --category="rapport"

Mettre √† jour un document:
  files-core document update --id="doc123" --name="Nouveau nom" --description="Nouvelle description"

Supprimer un document:
  files-core document delete --id="doc123" --user-email="user@example.com" --force

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üõ†Ô∏è  SCRIPTS NPM DISPONIBLES
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

Scripts utilisateur:
  npm run user:create     npm run user:demo
  npm run user:read       npm run user:test  
  npm run user:list       npm run user:benchmark
  npm run user:update     npm run user:init
  npm run user:delete     npm run user:validate
  npm run user:verify     npm run user:docs

Scripts document:
  npm run doc:create      npm run doc:demo
  npm run doc:read        npm run doc:test
  npm run doc:list        npm run doc:benchmark
  npm run doc:update      npm run doc:search
  npm run doc:delete      npm run doc:init
                          npm run doc:validate
                          npm run doc:docs
                          npm run doc:check-mega

Scripts globaux:
  npm run all-commands    npm run setup
  npm run menu            npm run build
  npm run stats           npm run dev

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
`);
  });

// Commande d'initialisation
program
  .command('init')
  .description('üöÄ Initialiser Files Core')
  .action(async () => {
    console.log('üöÄ Initialisation de Files Core...\n');
    
    try {
      console.log('1Ô∏è‚É£ V√©rification de la base de donn√©es...');
      // V√©rifier la connexion √† la base de donn√©es
      
      console.log('2Ô∏è‚É£ Configuration des templates...');
      // Initialiser les configurations
      
      console.log('3Ô∏è‚É£ V√©rification de l\'environnement MEGA...');
      // V√©rifier les credentials MEGA
      
      console.log('\n‚úÖ Files Core initialis√© avec succ√®s!');
      console.log('\nüìö Prochaines √©tapes:');
      console.log('   npm run user:demo    # Cr√©er des utilisateurs de test');
      console.log('   npm run doc:demo     # Cr√©er des documents de test');
      console.log('   npm run all-commands # Voir toutes les commandes');
      
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'initialisation:', error);
      process.exit(1);
    }
  });

// Commande quickstart
program
  .command('quickstart')
  .description('‚ö° D√©marrage rapide avec donn√©es de d√©monstration')
  .action(async () => {
    console.log('‚ö° D√©marrage rapide de Files Core...\n');
    
    try {
      console.log('üé≠ Cr√©ation d\'utilisateurs de d√©monstration...');
      // Cr√©er des utilisateurs de test
      
      console.log('üìÅ Cr√©ation de documents de d√©monstration...');
      // Cr√©er des documents de test
      
      console.log('\nüéâ D√©monstration cr√©√©e avec succ√®s!');
      console.log('\nüîç Pour explorer:');
      console.log('   files-core user list');
      console.log('   files-core document list');
      
    } catch (error) {
      console.error('‚ùå Erreur lors du quickstart:', error);
      process.exit(1);
    }
  });

// Gestion des erreurs globales
process.on('uncaughtException', (error) => {
  console.error('‚ùå Erreur non g√©r√©e:', error.message);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå Promesse rejet√©e:', reason);
  process.exit(1);
});

// Parsing des arguments et ex√©cution
program.parse();

// Si aucune commande n'est fournie, afficher l'aide
if (!process.argv.slice(2).length) {
  program.outputHelp();
}
